generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client-test"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev-test.db"
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  phone       String
  password    String
  role        Role
  branchId    Int?
  branch      Branch?  @relation(fields: [branchId], references: [id])
  transactions Transaction[]
  wasteLogs   WasteLog[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Branch {
  id          Int      @id @default(autoincrement())
  name        String
  location    String?
  users       User[]
  inventories Inventory[]
  transactions Transaction[]
  stockTransfersFrom StockTransfer[] @relation("FromBranch")
  stockTransfersTo StockTransfer[] @relation("ToBranch")
  wasteLogs   WasteLog[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  imageUrl    String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  inventories Inventory[]
  transactionItems TransactionItem[]
  stockTransfers StockTransfer[]
  wasteLogs   WasteLog[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Inventory {
  id            Int      @id @default(autoincrement())
  productId     Int
  branchId      Int
  quantity      Int
  productionDate DateTime
  expiryDate    DateTime
  waste         Int      @default(0)
  tester        Int      @default(0)
  product       Product  @relation(fields: [productId], references: [id])
  branch        Branch   @relation(fields: [branchId], references: [id])
  wasteLogs     WasteLog[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Transaction {
  id            Int      @id @default(autoincrement())
  branchId      Int
  userId        Int
  totalAmount   Float
  paymentMethod PaymentMethod
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  items         TransactionItem[]
  branch        Branch   @relation(fields: [branchId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model TransactionItem {
  id            Int      @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  price         Float
  discount      Float   @default(0)
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
}

model StockTransfer {
  id              Int      @id @default(autoincrement())
  fromBranchId    Int
  toBranchId      Int
  productId       Int
  quantity        Int
  expiryDate      DateTime
  status          TransferStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  fromBranch      Branch   @relation("FromBranch", fields: [fromBranchId], references: [id])
  toBranch        Branch   @relation("ToBranch", fields: [toBranchId], references: [id])
  product         Product  @relation(fields: [productId], references: [id])
}

model WasteLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  branchId    Int
  productId   Int
  inventoryId Int
  quantity    Int
  reason      WasteReason
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  branch      Branch   @relation(fields: [branchId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
}

enum Role {
  ADMIN
  HEAD_BRANCH
  STAFF
  FINANCE
}

enum PaymentMethod {
  CASH
  QRIS_STATIC
}

enum TransferStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum WasteReason {
  EXPIRED
  DAMAGED
  LOST
  SAMPLE
  OTHER
}
